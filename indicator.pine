//@version=6
// ╔════════════════════════════════════════════════════════════════════╗
// ║  BTC‑2 • Risk‑Sizing + Dynamic‑SL • limit‑entry + cooldown (IND)   ║
// ║  Индикатор на основе стратегии                                     ║
// ║  old2015@gmail.com                                                 ║
// ║  Данный файл реализует визуальный индикатор, повторяющий логику    ║
// ║  одноимённой стратегии. Здесь нет реальных сделок, но все          ║
// ║  вычисления размеров позиций, стопов и тейк‑профитов совпадают     ║
// ║  со стратегией. Индикатор отображает лимитные заявки, точки        ║
// ║  входа,  стоп‑лоссы и тейк‑профиты с помощью линий и меток.        ║
// ╚════════════════════════════════════════════════════════════════════╝
indicator(
     title            = "ind BTC_m15 • Risk‑Sizing + Dyn‑SL (limit+cooldown)",
     shorttitle       = "ind BTC_m15_DSL_IND",
     overlay          = true,
     max_labels_count = 500)

// ───────── 1.  Риск и стоп‑параметры ──────────────────────────────────
// Настройки управления рисками. Значения совпадают со стратегией,
// поэтому расчёты в индикаторе идентичны торговой системе.
// riskPerc  – доля капитала, которую мы готовы рискнуть в одной сделке.
// atrLen    – период ATR, используемый при расчёте динамического стопа.
// coefA/cofB формируют линию для вычисления SL в процентах от цены.
// baseSL    – минимальный размер стоп‑лосса в процентах.
riskPerc        = input.float(1.0 , "Risk per trade (%)", step=0.1)
atrLen          = input.int  (100 , "ATR length")
coefA           = input.float(0.56 , "Dyn‑SL: intercept a", step=0.01)
coefB           = input.float(0.0035,"Dyn‑SL: slope b"     , step=0.0001)
baseSL          = input.float(1.5 , "Base SL (%)", step=0.1)

// tpMultLong/Short задают множители для вычисления тейк‑профита
// относительно размера стопа. Для лонгов тейк больше, чем для шортов.
tpMultLong      = input.float(4.5 , "TP multiple LONG",  step=0.1)
tpMultShort     = input.float(3.1 , "TP multiple SHORT", step=0.1)

// минимальный шаг размера позиции (используется при округлении qty)
qtyStep         = input.float(0.001,"Lot step (BTC)", step=0.0001)

// entryTimeout  – количество баров, через которое снимается неисполненная
// лимитная заявка. cooldownBars – пауза после выхода из позиции,
// во время которой новые заявки не ставятся.
entryTimeout    = input.int (1000 , "Cancel limit after N bars", 1)
cooldownBars    = input.int (1 , "Cooldown bars after exit",  1)

// colorBars – раскрашивать свечи в зависимости от событий.
// showMark  – отображать ли буквы "L"/"S" над барами с сигналом.
colorBars       = input.bool(true , "Color bars?")
showMark        = input.bool(true , "Show L/S markers?")
takePartial     = input.bool(true ,  "Частично фиксируем прибыль ?")
partialXR       = input.float(2.2 , "Фиксируем прибыль, на xR", step=0.1)
partialPercent  = input.float(10.0, "Фиксируем прибыль в процентах", step=1)
moveToBE        = input.bool(true ,  "После частичной фиксации переводим в б/у?")

// Начальная величина капитала, необходимая для расчёта размера позиции
// при имитации стратегии в индикаторе.
initEquity      = input.float(50000, "Initial equity")
var float equity = initEquity

// ───────── 2.  Фильтры и параметры индикаторов (как в стратегии) ───
// Блок содержит настройки фильтров сигналов. Они полностью повторяют
// стратегию и позволяют гибко включать/отключать те или иные условия.

// Параметры дневного тренда и индекса "пила" (Choppiness)
emaLenDaily       = input.int  (200, "EMA (Daily)")      // период EMA на дневке
chopLengthDaily   = input.int  (14 , "Chop len (Daily)")  // окно для расчёта choppiness
chopThreshTrend   = input.float(38 , "Chop < → Trend", step=0.5) // порог, ниже которого рынок считается трендовым

// Настройки MACD и RSI на 4‑часовом таймфрейме
macdFastLen       = input.int(12, "MACD fast (4H)")
macdSlowLen       = input.int(26, "MACD slow (4H)")
macdSigLen        = input.int( 9, "MACD signal (4H)")
rsiLen4h          = input.int(14, "RSI len (4H)")
rsiOB             = input.int(60, "RSI overbought")
rsiOS             = input.int(40, "RSI oversold")

// Фильтры на 15‑минутном графике
volLen15m         = input.int (20, "Volume MA len (15m)")     // период скользящей по объёму
volSpikeFactor    = input.float(1.7, "Volume spike ×", step=0.1) // множитель "спайка" объёма
obvLen            = input.int (10 , "OBV EMA len (15m)")       // сглаживание OBV

// Настройки полос Боллинджера и фильтра по диапазону
bbPeriod          = input.int (20 , "BB period (15m)")
bbDev             = input.float(2.0,"BB deviation", step=0.1)
atrPeriod15m      = input.int (14 , "ATR len (15m)")
atrMult15m        = input.float(1.5,"ATR filter ×", step=0.1)

// Включение/отключение свечных паттернов
useBullEngulf     = input.bool(true,  "Pattern: Bull Engulf")
useBearEngulf     = input.bool(true,  "Pattern: Bear Engulf")
usePinBar         = input.bool(false,  "Pattern: Pin Bar")

// Флаги включения фильтров
useDailyTrendChop = input.bool(false,"Filter: Daily trend+chop")
useMACDRSI        = input.bool(true ,"Filter: MACD+RSI (4H)")
useVolSpike       = input.bool(true ,"Filter: Volume spike")
useOBV            = input.bool(true ,"Filter: OBV growing")
useBollinger      = input.bool(false,"Filter: Bollinger zone")
useATR            = input.bool(true ,"Filter: ATR range")
useCandlePatterns = input.bool(true ,"Filter: Candle patterns")

// ───────── 3.  helper‑функции ────────────────────────────────────────
// Небольшие вспомогательные функции для расчётов

// Индекс "пилообразности" (Choppiness Index). Значение ближе к 100
// говорит о флэте, ближе к 0 – о тренде.
f_chop(_l)=>
    100*math.log10(ta.sma(ta.atr(1),_l)*_l/(ta.highest(high,_l)-ta.lowest(low,_l)))/math.log10(_l)

// Поиск бычьего пин-бара
f_bPin(_o,_h,_l,_c)=>
    body=math.abs(_c-_o)
    wick=_c>_o ? _o-_l : _c-_l
    wick>body*2 and _c>_o

// Поиск медвежьего пин-бара
f_sPin(_o,_h,_l,_c)=>
    body=math.abs(_o-_c)
    wick=_o>_c ? _h-_o : _h-_c
    wick>body*2 and _c<_o

// Форматирование процента с двумя знаками после запятой
fmtPct(x)=> str.tostring(math.round(x*100)/100, "#.##")

// ───────── 4.  HTF‑данные ────────────────────────────────────────────
// Получение данных со старших таймфреймов (HTF). Эти значения используются
// в фильтрах сигналов и для расчёта динамического стоп‑лосса.

// Текущее значение ATR на рабочем таймфрейме
atrNow   = ta.atr(atrLen)

// Дневная EMA и индекс "пила" на дневке
dailyEMA = request.security(syminfo.tickerid,"D",  ta.ema(close,emaLenDaily),
     lookahead = barmerge.lookahead_off)
chopDaily= request.security(syminfo.tickerid,"D",  f_chop(chopLengthDaily),
     lookahead = barmerge.lookahead_off)

// MACD и RSI с четырёхчасового таймфрейма
[macd4h, signal4h, _] = request.security(
     syminfo.tickerid,
     "240",
     ta.macd(close, macdFastLen, macdSlowLen, macdSigLen),
     lookahead = barmerge.lookahead_off)
rsi4h = request.security(syminfo.tickerid,"240", ta.rsi(close,rsiLen4h),
     lookahead = barmerge.lookahead_off)

// Объём и OBV с 15‑минуток
vol15m     = request.security(syminfo.tickerid,"15", volume,
     lookahead = barmerge.lookahead_off)
volMA15m   = request.security(syminfo.tickerid,"15", ta.sma(volume,volLen15m),
     lookahead = barmerge.lookahead_off)
obvRaw     = ta.cum(math.sign(ta.change(close))*volume)
obv15m     = request.security(syminfo.tickerid,"15", ta.ema(obvRaw,obvLen),
     lookahead = barmerge.lookahead_off)

// Полосы Боллинджера и ATR на 15‑м таймфрейме
bbMid      = request.security(syminfo.tickerid,"15", ta.sma(close,bbPeriod),
     lookahead = barmerge.lookahead_off)
bbStd      = request.security(syminfo.tickerid,"15", ta.stdev(close,bbPeriod),
     lookahead = barmerge.lookahead_off)
bbUpper    = bbMid + bbStd*bbDev
bbLower    = bbMid - bbStd*bbDev
atr15m     = request.security(syminfo.tickerid,"15", ta.atr(atrPeriod15m),
     lookahead = barmerge.lookahead_off)

[o15,c15,h15,l15] = request.security(syminfo.tickerid,"15", [open,close,high,low],
     lookahead = barmerge.lookahead_off)

// ───────── 5.  Сигналы ───────────────────────────────────────────────
// Формирование торговых сигналов на основе полученных данных.

// Свечные паттерны на 15‑минутном графике
bullishEngulf = useBullEngulf and c15[1]<o15[1] and c15>o15 and c15>=o15[1] and o15<=c15[1]
bearishEngulf = useBearEngulf and c15[1]>o15[1] and c15<o15 and c15<=o15[1] and o15>=c15[1]
bullPinBar    = usePinBar and f_bPin(o15,h15,l15,c15)
bearPinBar    = usePinBar and f_sPin(o15,h15,l15,c15)
bullPattern   = bullishEngulf or bullPinBar
bearPattern   = bearishEngulf or bearPinBar

// Фильтры условий – тренд, импульс, объём и т.д.
bullTrendDaily = close>dailyEMA and chopDaily<chopThreshTrend
bearTrendDaily = close<dailyEMA and chopDaily<chopThreshTrend
bullImpulse4h  = macd4h>signal4h and rsi4h>rsiOB
bearImpulse4h  = macd4h<signal4h and rsi4h<rsiOS
volSpike       = vol15m > volMA15m * volSpikeFactor
obvGrowing     = obv15m > obv15m[1]
safeBBzone     = close < bbUpper*0.99 and close > bbLower*1.01
atrFilter      = (high-low) > atr15m * atrMult15m

// Итоговое условие лонг‑сигнала. Каждый фильтр можно отключить.
longSignal = ((not useDailyTrendChop) or bullTrendDaily) and
     ((not useMACDRSI)        or bullImpulse4h)  and
     ((not useVolSpike)       or volSpike)       and
     ((not useOBV)            or obvGrowing)     and
     ((not useBollinger)      or safeBBzone)     and
     ((not useATR)            or atrFilter)      and
     ((not useCandlePatterns) or bullPattern)

// Условие шорт‑сигнала
shortSignal = ((not useDailyTrendChop) or bearTrendDaily) and
     ((not useMACDRSI)        or bearImpulse4h)  and
     ((not useVolSpike)       or volSpike)       and
     ((not useOBV)            or not obvGrowing) and
     ((not useBollinger)      or safeBBzone)     and
     ((not useATR)            or atrFilter)      and
     ((not useCandlePatterns) or bearPattern)

// ───────── 6.  Состояние для симуляции ───────────────────────────────
// Переменные, хранящие состояние "виртуальной" позиции. Благодаря им
// индикатор может отображать процесс торговли без фактических ордеров.
var bool   waiting  = false  // есть ли активная лимитка
var bool   waitLong = false  // направление ожидаемой позиции
var int    waitBar  = na     // бар, на котором выставлена лимитка
var float  waitPx   = na     // цена лимитного ордера
var float  qty      = na     // размер позиции в контрактах
var int    lastExit = na     // индекс бара последнего выхода
var int    pos      = 0      // текущая позиция: 1, -1 или 0
var float  entryPrice = na   // цена входа
var float  slPrice = na      // текущий стоп‑лосс
var float  tpPrice = na      // текущий тейк‑профит
var line   entryLine = na
var line   slLine = na
var line   slLineBE = na  // линия стопа после перевода в безубыток
var line   tpLine = na
var bool   partialHit = false  // достигнут ли xR в текущей сделке
var float  partialLvl = na     // цена уровня xR

// Цвет, которым будет подсвечена свеча текущего бара
var color  barClr = na
barClr := na

// ───────── 7.  Расчёт qty по риску ─────────────────────────────────── 
// Calculate position size the same way as in the strategy.
// Функция возвращает размер позиции исходя из заданного риска.
calcQty(price, slPerc)=>
    riskUSD = equity * riskPerc / 100      // сумма, которой рискуем в долларах
    stopUSD = price * slPerc / 100         // стоимость пункта стопа
    qtyRisk = riskUSD / stopUSD            // размер позиции по риску
    qtyMax  = (equity * 0.95) / price      // защита от нехватки маржи
    qtyCalc = math.min(qtyRisk, qtyMax)
    math.max(math.round(qtyCalc/qtyStep)*qtyStep, qtyStep) // округляем к шагу

// ───────── 8.  Отмена просроченных лимиток ───────────────────────────
// Если лимитный ордер не был исполнен за заданное количество баров,
// снимаем его и помечаем бар оранжевым цветом.
if waiting and pos==0 and (bar_index - waitBar) >= entryTimeout
    waiting := false
    label.new(
         bar_index,
         high,
         "Cancel",
         xloc = xloc.bar_index,
         yloc = yloc.price,
         style = label.style_label_center,
         size = size.tiny,
         color = color.orange,
         textcolor = color.white)
    barClr := color.orange

// ───────── 9.  Создание новой лимит‑заявки ───────────────────────────
// После завершения предыдущей сделки и соблюдения cooldown индикатор
// выставляет лимитный ордер по цене открытия сигнального бара.
coolReady = na(lastExit) or (bar_index - lastExit) >= cooldownBars
if pos==0 and not waiting and coolReady and (longSignal or shortSignal)
    waitLong := longSignal
    waitPx   := open
    waitBar  := bar_index
    slPerc   = math.max(baseSL, coefA + coefB * atrNow)
    qty      := calcQty(waitPx, slPerc)
    tpMultCur = waitLong ? tpMultLong : tpMultShort
    tpPerc    = slPerc * tpMultCur
    slLimit   = waitLong ? waitPx*(1 - slPerc/100)
         : waitPx*(1 + slPerc/100)
    tpLimit   = waitLong ? waitPx*(1 + tpPerc/100)
         : waitPx*(1 - tpPerc/100)
    waiting := true

    // Отправляем алерт о постановке лимитной заявки
    sideTxt = waitLong ? "LONG" : "SHORT"
    alert(
         "LIMIT-" + sideTxt + " | " + syminfo.ticker + " | L " + str.tostring(waitPx, format.price),
         alert.freq_once_per_bar)

    // Подписываем на графике параметры заявки
    clr = waitLong ? color.green : color.red
    label.new(
         bar_index,
         waitLong ? low : high,
         "Limit " + str.tostring(waitPx, format.price) +
             " qty " + str.tostring(qty) +
             ", SL " + fmtPct(slPerc) + "% " + str.tostring(slLimit, format.price) +
             ", TP " + fmtPct(tpPerc) + "% " + str.tostring(tpLimit, format.price),
         xloc = xloc.bar_index,
         yloc = yloc.price,
         style = waitLong ? label.style_label_up : label.style_label_down,
         size = size.tiny,
         color = clr,
         textcolor = color.white)
    barClr := clr

// ───────── 10.  Проверка исполнения лимита ───────────────────────────
// Отслеживаем, была ли исполнена лимитная заявка.
if waiting and pos==0 and bar_index > waitBar
    bool filled = (waitLong and low <= waitPx) or (not waitLong and high >= waitPx)
    if filled
        waiting := false
        pos := waitLong ? 1 : -1
        entryPrice := waitPx
        slPerc = math.max(baseSL, coefA + coefB * atrNow)
        tpMultCur = waitLong ? tpMultLong : tpMultShort
        tpPerc  = slPerc * tpMultCur
        slPrice := waitLong ? entryPrice * (1 - slPerc / 100)
             : entryPrice * (1 + slPerc / 100)
        tpPrice := waitLong ? entryPrice * (1 + tpPerc / 100)
             : entryPrice * (1 - tpPerc / 100)
        slLine := line.new(bar_index, slPrice, bar_index, slPrice,
             color = color.red, style = line.style_dashed)
        tpLine := line.new(bar_index, tpPrice, bar_index, tpPrice,
             color = color.aqua, style = line.style_dashed)
        entryLine := line.new(bar_index, entryPrice, bar_index, entryPrice,
             color = color.blue, style = line.style_dashed)
        // Расчёт уровня частичной прибыли
        riskAbs = entryPrice * (slPerc / 100)
        partialLvl := (takePartial and partialXR > 0) ?
             (pos==1 ? entryPrice + riskAbs * partialXR
                     : entryPrice - riskAbs * partialXR) : na
        partialHit := false
        // Алерт о фактическом входе в позицию
        alert(
             "ENTRY-" + (waitLong ? "LONG" : "SHORT") + " | " + syminfo.ticker + " @ " + str.tostring(entryPrice, format.price),
             alert.freq_once_per_bar)
        label.new(
             bar_index,
             waitLong ? low : high,
             "Entry " + str.tostring(entryPrice, format.price) +
                 " qty " + str.tostring(qty) +
                 ", SL " + fmtPct(slPerc) + "% " + str.tostring(slPrice, format.price) +
                 ", TP " + fmtPct(tpPerc) + "% " + str.tostring(tpPrice, format.price),
             xloc = xloc.bar_index,
             yloc = yloc.price,
             style = waitLong ? label.style_label_up : label.style_label_down,
             size = size.tiny,
             color = color.blue,
             textcolor = color.white)
        barClr := color.blue

// ───────── 11.  Проверка выхода ─────────────────────────────────────
// Когда позиция открыта, проверяем достижение SL или TP
if pos != 0
    if partialHit and moveToBE
        line.set_xy2(slLineBE, bar_index, slPrice)
    else
        line.set_xy2(slLine, bar_index, slPrice)
    line.set_xy2(tpLine, bar_index, tpPrice)
    line.set_xy2(entryLine, bar_index, entryPrice)
    // Частичная фиксация прибыли при достижении xR
    if not partialHit and takePartial and partialXR > 0
        bool touch = (pos==1 and high >= partialLvl) or (pos==-1 and low <= partialLvl)
        if touch
            alert(
                 "PARTIAL-" + str.tostring(partialXR) + "R | " + syminfo.ticker + " @ " + str.tostring(partialLvl, format.price),
                 alert.freq_once_per_bar)
            label.new(
                 bar_index,
                 high,
                 str.tostring(partialXR) + "R",
                 xloc = xloc.bar_index,
                 yloc = yloc.price,
                 style = label.style_label_down,
                 size = size.tiny,
                 color = color.new(color.lime, 0),
                 textcolor = color.black)
            barClr := color.new(color.lime, 80)
            // фиксация части позиции в виртуальном счёте
            qtyPart = qty * partialPercent / 100
            profitPart = pos==1 ? (partialLvl - entryPrice) * qtyPart : (entryPrice - partialLvl) * qtyPart
            equity += profitPart
            qty -= qtyPart
            if moveToBE
                slPrice := entryPrice
                slLineBE := line.new(bar_index, slPrice, bar_index, slPrice,
                     color = color.red, style = line.style_dashed)
            partialHit := true
    bool hitSL = (pos==1 and low <= slPrice) or (pos==-1 and high >= slPrice)
    bool hitTP = (pos==1 and high >= tpPrice) or (pos==-1 and low <= tpPrice)

    if hitSL or hitTP
        float exitPrice = na
        string tag = ""
        if hitSL and hitTP
            exitPrice := tpPrice  // TP happens first according to TV bar model
            tag := "TP"
        else
            exitPrice := hitSL ? slPrice : tpPrice
            tag := hitSL ? "SL" : "TP"
        clr = tag == "SL" ? color.maroon : color.aqua
        label.new(
             bar_index,
             high,
             tag + " " + str.tostring(exitPrice, format.price),
             xloc = xloc.bar_index,
             yloc = yloc.price,
             style = label.style_label_down,
             size = size.tiny,
             color = clr,
             textcolor = color.white)
        barClr := clr
        lastExit := bar_index
        // обновляем виртуальный счёт, чтобы расчёт qty был реалистичным
        profit = pos==1 ? (exitPrice - entryPrice) * qty : (entryPrice - exitPrice) * qty
        equity += profit
        pos := 0
        partialHit := false
        partialLvl := na
        slLine := na
        slLineBE := na
        tpLine := na
        entryLine := na

        // ► На том же баре может появиться новый сигнал. Ставим новую лимитку
        //    без ожидания cooldown, как делает стратегия.
        if not waiting and (longSignal or shortSignal)
            waitLong := longSignal
            waitPx   := open
            waitBar  := bar_index
            slPerc   = math.max(baseSL, coefA + coefB * atrNow)
            qty      := calcQty(waitPx, slPerc)
            tpMultCur = waitLong ? tpMultLong : tpMultShort
            tpPerc    = slPerc * tpMultCur
            slLimit   = waitLong ? waitPx*(1 - slPerc/100)
                 : waitPx*(1 + slPerc/100)
            tpLimit   = waitLong ? waitPx*(1 + tpPerc/100)
                 : waitPx*(1 - tpPerc/100)
            waiting := true

            sideTxt = waitLong ? "LONG" : "SHORT"
            alert(
                 "LIMIT-" + sideTxt + " | " + syminfo.ticker + " | L " + str.tostring(waitPx, format.price),
                 alert.freq_once_per_bar)

            clr := waitLong ? color.green : color.red
            label.new(
                 bar_index,
                 waitLong ? low : high,
                 "Limit " + str.tostring(waitPx, format.price) +
                     " qty " + str.tostring(qty) +
                     ", SL " + fmtPct(slPerc) + "% " + str.tostring(slLimit, format.price) +
                     ", TP " + fmtPct(tpPerc) + "% " + str.tostring(tpLimit, format.price),
                 xloc = xloc.bar_index,
                 yloc = yloc.price,
                 style = waitLong ? label.style_label_up : label.style_label_down,
                 size = size.tiny,
                 color = clr,
                 textcolor = color.white)
            barClr := clr

// ───────── 12.  Маркеры сигнала + barcolor ───────────────────────────
// Дополнительные метки на барах, где возникает сигнал. Позволяют
// визуально видеть места возможных входов.
if showMark and longSignal
    label.new(
         bar_index,
         high * 1.01,
         "L",
         xloc = xloc.bar_index,
         yloc = yloc.price,
         style = label.style_label_up,
         size = size.tiny,
         color = color.green)
if showMark and shortSignal
    label.new(
         bar_index,
         high * 1.01,
         "S",
         xloc = xloc.bar_index,
         yloc = yloc.price,
         style = label.style_label_down,
         size = size.tiny,
         color = color.red)

// Окрашиваем бары в зависимости от события (создание/отмена/вход/выход)
barcolor(colorBars ? barClr : na)
