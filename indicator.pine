//@version=6
// ╔════════════════════════════════════════════════════════════════════╗
// ║  BTC‑2 • Risk‑Sizing + Dynamic‑SL • limit‑entry + cooldown (IND)  ║
// ║  Индикатор на основе стратегии                                   ║
// ╚════════════════════════════════════════════════════════════════════╝
indicator(
     title               = "ind BTC2 • Risk‑Sizing + Dyn‑SL (limit+cooldown)",
     shorttitle          = "ind BTC2_RISK_DSL_IND",
     overlay             = true,
     max_labels_count    = 500)

// ───────── 1.  Риск и стоп‑параметры ────────────────────────────────── 
riskPerc        = input.float(1.0 , "Risk per trade (%)", step=0.1)
atrLen          = input.int  (100 , "ATR length")
coefA           = input.float(0.84 , "Dyn‑SL: intercept a", step=0.01)
coefB           = input.float(0.0035,"Dyn‑SL: slope b"     , step=0.0001)
baseSL          = input.float(1.0 , "Base SL (%)", step=0.1)

tpMultLong      = input.float(4.0 , "TP multiple LONG",  step=0.1)
tpMultShort     = input.float(2.0 , "TP multiple SHORT", step=0.1)

qtyStep         = input.float(0.001,"Lot step (BTC)", step=0.0001)

entryTimeout    = input.int (1000 , "Cancel limit after N bars", 1)
cooldownBars    = input.int (10 , "Cooldown bars after exit",  1)

colorBars       = input.bool(true , "Color bars?")
showMark        = input.bool(true , "Show L/S markers?")

// initial equity for qty calc
initEquity      = input.float(30000, "Initial equity")
var float equity = initEquity

// ───────── 2.  Фильтры и параметры индикаторов (как в стратегии) ───
emaLenDaily       = input.int  (200, "EMA (Daily)")
chopLengthDaily   = input.int  (14 , "Chop len (Daily)")
chopThreshTrend   = input.float(38 , "Chop < → Trend", step=0.5)

macdFastLen       = input.int(12, "MACD fast (4H)")
macdSlowLen       = input.int(26, "MACD slow (4H)")
macdSigLen        = input.int( 9, "MACD signal (4H)")
rsiLen4h          = input.int(14, "RSI len (4H)")
rsiOB             = input.int(60, "RSI overbought")
rsiOS             = input.int(40, "RSI oversold")

volLen15m         = input.int (20, "Volume MA len (15m)")
volSpikeFactor    = input.float(1.5, "Volume spike ×", step=0.1)
obvLen            = input.int (10 , "OBV EMA len (15m)")

bbPeriod          = input.int (20 , "BB period (15m)")
bbDev             = input.float(2.0,"BB deviation", step=0.1)
atrPeriod15m      = input.int (14 , "ATR len (15m)")
atrMult15m        = input.float(1.5,"ATR filter ×", step=0.1)

useBullEngulf     = input.bool(true,  "Pattern: Bull Engulf")
useBearEngulf     = input.bool(true,  "Pattern: Bear Engulf")
usePinBar         = input.bool(false,  "Pattern: Pin Bar")

useDailyTrendChop = input.bool(false,"Filter: Daily trend+chop")
useMACDRSI        = input.bool(true ,"Filter: MACD+RSI (4H)")
useVolSpike       = input.bool(true ,"Filter: Volume spike")
useOBV            = input.bool(true ,"Filter: OBV growing")
useBollinger      = input.bool(false,"Filter: Bollinger zone")
useATR            = input.bool(true ,"Filter: ATR range")
useCandlePatterns = input.bool(true ,"Filter: Candle patterns")

// ───────── 3.  helper‑функции ────────────────────────────────────────
f_chop(_l)=>
    100*math.log10(ta.sma(ta.atr(1),_l)*_l/(ta.highest(high,_l)-ta.lowest(low,_l)))/math.log10(_l)

f_bPin(_o,_h,_l,_c)=>
    body=math.abs(_c-_o)
    wick=_c>_o ? _o-_l : _c-_l
    wick>body*2 and _c>_o

f_sPin(_o,_h,_l,_c)=>
    body=math.abs(_o-_c)
    wick=_o>_c ? _h-_o : _h-_c
    wick>body*2 and _c<_o

fmtPct(x)=> str.tostring(math.round(x*100)/100, "#.##")

// ───────── 4.  HTF‑данные ────────────────────────────────────────────
atrNow   = ta.atr(atrLen)

dailyEMA = request.security(syminfo.tickerid,"D",  ta.ema(close,emaLenDaily))
chopDaily= request.security(syminfo.tickerid,"D",  f_chop(chopLengthDaily))

[macd4h,signal4h,_] = request.security(syminfo.tickerid,"240",
     ta.macd(close,macdFastLen,macdSlowLen,macdSigLen))
rsi4h = request.security(syminfo.tickerid,"240", ta.rsi(close,rsiLen4h))

vol15m     = request.security(syminfo.tickerid,"15", volume)
volMA15m   = request.security(syminfo.tickerid,"15", ta.sma(volume,volLen15m))
obvRaw     = ta.cum(math.sign(ta.change(close))*volume)
obv15m     = request.security(syminfo.tickerid,"15", ta.ema(obvRaw,obvLen))

bbMid      = request.security(syminfo.tickerid,"15", ta.sma(close,bbPeriod))
bbStd      = request.security(syminfo.tickerid,"15", ta.stdev(close,bbPeriod))
bbUpper    = bbMid + bbStd*bbDev
bbLower    = bbMid - bbStd*bbDev
atr15m     = request.security(syminfo.tickerid,"15", ta.atr(atrPeriod15m))

[o15,c15,h15,l15] = request.security(syminfo.tickerid,"15",[open,close,high,low])

// ───────── 5.  Сигналы ───────────────────────────────────────────────
bullishEngulf = useBullEngulf and c15[1]<o15[1] and c15>o15 and c15>=o15[1] and o15<=c15[1]
bearishEngulf = useBearEngulf and c15[1]>o15[1] and c15<o15 and c15<=o15[1] and o15>=c15[1]
bullPinBar    = usePinBar and f_bPin(o15,h15,l15,c15)
bearPinBar    = usePinBar and f_sPin(o15,h15,l15,c15)
bullPattern   = bullishEngulf or bullPinBar
bearPattern   = bearishEngulf or bearPinBar

bullTrendDaily = close>dailyEMA and chopDaily<chopThreshTrend
bearTrendDaily = close<dailyEMA and chopDaily<chopThreshTrend
bullImpulse4h  = macd4h>signal4h and rsi4h>rsiOB
bearImpulse4h  = macd4h<signal4h and rsi4h<rsiOS
volSpike       = vol15m > volMA15m * volSpikeFactor
obvGrowing     = obv15m > obv15m[1]
safeBBzone     = close < bbUpper*0.99 and close > bbLower*1.01
atrFilter      = (high-low) > atr15m * atrMult15m

longSignal  = ((not useDailyTrendChop) or bullTrendDaily) and
              ((not useMACDRSI)        or bullImpulse4h)  and
              ((not useVolSpike)       or volSpike)       and
              ((not useOBV)            or obvGrowing)     and
              ((not useBollinger)      or safeBBzone)     and
              ((not useATR)            or atrFilter)      and
              ((not useCandlePatterns) or bullPattern)

shortSignal = ((not useDailyTrendChop) or bearTrendDaily) and
              ((not useMACDRSI)        or bearImpulse4h)  and
              ((not useVolSpike)       or volSpike)       and
              ((not useOBV)            or not obvGrowing) and
              ((not useBollinger)      or safeBBzone)     and
              ((not useATR)            or atrFilter)      and
              ((not useCandlePatterns) or bearPattern)

// ───────── 6.  Состояние для симуляции ───────────────────────────────
var bool   waiting  = false
var bool   waitLong = false
var int    waitBar  = na
var float  waitPx   = na
var float  qty      = na
var int    lastExit = na
var int    pos      = 0
var float  entryPrice = na
var float  slPrice = na
var float  tpPrice = na
var line   entryLine = na
var line   slLine = na
var line   tpLine = na

var color  barClr = na
barClr := na

// ───────── 7.  Расчёт qty по риску ───────────────────────────────────
calcQty(price, slPerc)=>
    riskUSD = equity * riskPerc / 100
    stopUSD = price * slPerc / 100
    qtyRisk = riskUSD / stopUSD
    math.max(math.round(qtyRisk/qtyStep)*qtyStep, qtyStep)

// ───────── 8.  Отмена просроченных лимиток ───────────────────────────
if waiting and pos==0 and (bar_index - waitBar) >= entryTimeout
    waiting := false
    label.new(bar_index, high, "Cancel",
              xloc=xloc.bar_index, yloc=yloc.price,
              style=label.style_label_center, size=size.tiny,
              color=color.orange, textcolor=color.white)
    barClr := color.orange

// ───────── 9.  Создание новой лимит‑заявки ───────────────────────────
coolReady = na(lastExit) or (bar_index - lastExit) >= cooldownBars
if pos==0 and not waiting and coolReady and (longSignal or shortSignal)
    waitLong := longSignal
    waitPx   := open
    waitBar  := bar_index
    slPerc   = math.max(baseSL, coefA + coefB * atrNow)
    qty      = calcQty(waitPx, slPerc)
    tpMultCur = waitLong ? tpMultLong : tpMultShort
    tpPerc    = slPerc * tpMultCur
    slLimit   = waitLong ? waitPx*(1 - slPerc/100)
                         : waitPx*(1 + slPerc/100)
    tpLimit   = waitLong ? waitPx*(1 + tpPerc/100)
                         : waitPx*(1 - tpPerc/100)
    waiting := true

    sideTxt = waitLong ? "LONG" : "SHORT"
    alert("LIMIT-"+sideTxt+" | "+syminfo.ticker+
          " | L "+str.tostring(waitPx,format.price),
          alert.freq_once_per_bar)

    clr = waitLong ? color.green : color.red
    label.new(bar_index, waitLong?low:high,
              "Limit "+str.tostring(waitPx,format.price)+
              ", SL "+fmtPct(slPerc)+"% "+str.tostring(slLimit,format.price)+
              ", TP "+fmtPct(tpPerc)+"% "+str.tostring(tpLimit,format.price),
              xloc=xloc.bar_index, yloc=yloc.price,
              style=waitLong?label.style_label_up:label.style_label_down,
              size=size.tiny, color=clr, textcolor=color.white)
    barClr := clr

// ───────── 10.  Проверка исполнения лимита ───────────────────────────
if waiting and pos==0 and bar_index > waitBar
    bool filled = (waitLong and low <= waitPx) or (not waitLong and high >= waitPx)
    if filled
        waiting := false
        pos := waitLong ? 1 : -1
        entryPrice := waitPx
        slPerc = math.max(baseSL, coefA + coefB * atrNow)
        tpMultCur = waitLong ? tpMultLong : tpMultShort
        tpPerc  = slPerc * tpMultCur
        slPrice := waitLong ? entryPrice*(1 - slPerc/100)
                             : entryPrice*(1 + slPerc/100)
        tpPrice := waitLong ? entryPrice*(1 + tpPerc/100)
                             : entryPrice*(1 - tpPerc/100)
        slLine := line.new(bar_index, slPrice, bar_index, slPrice,
                           color=color.red, style=line.style_dashed)
        tpLine := line.new(bar_index, tpPrice, bar_index, tpPrice,
                           color=color.aqua, style=line.style_dashed)
        entryLine := line.new(bar_index, entryPrice, bar_index, entryPrice,
                              color=color.blue, style=line.style_dashed)
        alert("ENTRY-"+(waitLong?"LONG":"SHORT")+" | "+syminfo.ticker+
              " @ "+str.tostring(entryPrice,format.price),
              alert.freq_once_per_bar)
        label.new(bar_index, waitLong?low:high,
             "Entry "+str.tostring(entryPrice,format.price)+
             ", SL "+fmtPct(slPerc)+"% "+str.tostring(slPrice,format.price)+
             ", TP "+fmtPct(tpPerc)+"% "+str.tostring(tpPrice,format.price),
             xloc=xloc.bar_index, yloc=yloc.price,
             style=waitLong?label.style_label_up:label.style_label_down,
             size=size.tiny, color=color.lime, textcolor=color.black)
        barClr := color.lime

// ───────── 11.  Проверка выхода ─────────────────────────────────────
if pos != 0
    line.set_xy2(slLine, bar_index, slPrice)
    line.set_xy2(tpLine, bar_index, tpPrice)
    line.set_xy2(entryLine, bar_index, entryPrice)
    bool hitSL = (pos==1 and low <= slPrice) or (pos==-1 and high >= slPrice)
    bool hitTP = (pos==1 and high >= tpPrice) or (pos==-1 and low <= tpPrice)
    if hitSL or hitTP
        exitPrice = hitSL ? slPrice : tpPrice
        tag = hitSL ? "SL" : "TP"
        clr = hitSL ? color.maroon : color.aqua
        label.new(bar_index, high, tag+" "+str.tostring(exitPrice,format.price),
                  xloc=xloc.bar_index, yloc=yloc.price,
                  style=label.style_label_down, size=size.tiny,
                  color=clr, textcolor=color.white)
        barClr := clr
        lastExit := bar_index
        pos := 0
        slLine := na
        tpLine := na
        entryLine := na

// ───────── 12.  Маркеры сигнала + barcolor ───────────────────────────
if showMark and longSignal
    label.new(bar_index, high*1.01, "L",
              xloc=xloc.bar_index, yloc=yloc.price,
              style=label.style_label_up, size=size.tiny,
              color=color.green)
if showMark and shortSignal
    label.new(bar_index, high*1.01, "S",
              xloc=xloc.bar_index, yloc=yloc.price,
              style=label.style_label_down, size=size.tiny,
              color=color.red)

barcolor(colorBars ? barClr : na)
