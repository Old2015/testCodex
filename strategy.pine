//@version=6
// ╔════════════════════════════════════════════════════════════════════╗
// ║  BTC‑2 • Risk‑Sizing + Dynamic‑SL • limit‑entry + cooldown        ║
// ║  ▸ лимит = open сигнального бара; заявка живёт N баров            ║
// ║  ▸ SL% = max(BaseSL , a + b·ATR);  TP% = SL% × tpMult(long/short) ║
// ║  ▸ qty рассчитывается от риска + проверка маржи                   ║
// ║  ▸ alert():                                                       ║
// ║        LIMIT‑LONG  | …  – лимитка Long выставлена                 ║
// ║        LIMIT‑SHORT | …  – лимитка Short выставлена                ║
// ║        ENTRY‑LONG  | …  – позиция Long открылась                  ║
// ║        ENTRY‑SHORT | …  – позиция Short открылась                 ║
// ╚════════════════════════════════════════════════════════════════════╝
strategy(
     title               = "strat BTC2 • Risk‑Sizing + Dyn‑SL (limit+cooldown)",
     shorttitle          = "strat BTC2_RISK_DSL",
     overlay             = true,
     default_qty_type    = strategy.fixed,
     default_qty_value   = 0,
     initial_capital     = 30000,
     currency            = currency.USDT,
     process_orders_on_close = true,
     max_labels_count    = 500,
     calc_on_every_tick  = false)

// ───────── 1.  Риск и стоп‑параметры ────────────────────────────────── 
riskPerc        = input.float(1.0 , "Risk per trade (%)", step=0.1)
atrLen          = input.int  (100 , "ATR length")
coefA           = input.float(0.84 , "Dyn‑SL: intercept a", step=0.01)
coefB           = input.float(0.0035,"Dyn‑SL: slope b"     , step=0.0001)
baseSL          = input.float(1.0 , "Base SL (%)", step=0.1)

tpMultLong      = input.float(4.0 , "TP multiple LONG",  step=0.1)
tpMultShort     = input.float(2.0 , "TP multiple SHORT", step=0.1)

qtyStep         = input.float(0.001,"Lot step (BTC)", step=0.0001)

entryTimeout    = input.int (1000 , "Cancel limit after N bars", 1)
cooldownBars    = input.int (10 , "Cooldown bars after exit",  1)

colorBars       = input.bool(true , "Color bars?")
showMark        = input.bool(true , "Show L/S markers?")

// ───────── 2.  Фильтры и параметры индикаторов (как в индикаторе) ───
emaLenDaily       = input.int  (200, "EMA (Daily)")
chopLengthDaily   = input.int  (14 , "Chop len (Daily)")
chopThreshTrend   = input.float(38 , "Chop < → Trend", step=0.5)

macdFastLen       = input.int(12, "MACD fast (4H)")
macdSlowLen       = input.int(26, "MACD slow (4H)")
macdSigLen        = input.int( 9, "MACD signal (4H)")
rsiLen4h          = input.int(14, "RSI len (4H)")
rsiOB             = input.int(60, "RSI overbought")
rsiOS             = input.int(40, "RSI oversold")

volLen15m         = input.int (20, "Volume MA len (15m)")
volSpikeFactor    = input.float(1.5, "Volume spike ×", step=0.1)
obvLen            = input.int (10 , "OBV EMA len (15m)")

bbPeriod          = input.int (20 , "BB period (15m)")
bbDev             = input.float(2.0,"BB deviation", step=0.1)
atrPeriod15m      = input.int (14 , "ATR len (15m)")
atrMult15m        = input.float(1.5,"ATR filter ×", step=0.1)

useBullEngulf     = input.bool(true,  "Pattern: Bull Engulf")
useBearEngulf     = input.bool(true,  "Pattern: Bear Engulf")
usePinBar         = input.bool(false,  "Pattern: Pin Bar")

useDailyTrendChop = input.bool(false,"Filter: Daily trend+chop")
useMACDRSI        = input.bool(true ,"Filter: MACD+RSI (4H)")
useVolSpike       = input.bool(true ,"Filter: Volume spike")
useOBV            = input.bool(true ,"Filter: OBV growing")
useBollinger      = input.bool(false,"Filter: Bollinger zone")
useATR            = input.bool(true ,"Filter: ATR range")
useCandlePatterns = input.bool(true ,"Filter: Candle patterns")

// ───────── 3.  helper‑функции ────────────────────────────────────────
f_chop(_l)=>
    100*math.log10(ta.sma(ta.atr(1),_l)*_l/(ta.highest(high,_l)-ta.lowest(low,_l)))/math.log10(_l)

f_bPin(_o,_h,_l,_c)=>
    body=math.abs(_c-_o)
    wick=_c>_o ? _o-_l : _c-_l
    wick>body*2 and _c>_o

f_sPin(_o,_h,_l,_c)=>
    body=math.abs(_o-_c)
    wick=_o>_c ? _h-_o : _h-_c
    wick>body*2 and _c<_o

fmtPct(x)=> str.tostring(math.round(x*100)/100, "#.##")

// ───────── 4.  HTF‑данные ────────────────────────────────────────────
atrNow   = ta.atr(atrLen)

dailyEMA = request.security(syminfo.tickerid,"D",  ta.ema(close,emaLenDaily))
chopDaily= request.security(syminfo.tickerid,"D",  f_chop(chopLengthDaily))

[macd4h,signal4h,_] = request.security(syminfo.tickerid,"240",
     ta.macd(close,macdFastLen,macdSlowLen,macdSigLen))
rsi4h = request.security(syminfo.tickerid,"240", ta.rsi(close,rsiLen4h))

vol15m     = request.security(syminfo.tickerid,"15", volume)
volMA15m   = request.security(syminfo.tickerid,"15", ta.sma(volume,volLen15m))
obvRaw     = ta.cum(math.sign(ta.change(close))*volume)
obv15m     = request.security(syminfo.tickerid,"15", ta.ema(obvRaw,obvLen))

bbMid      = request.security(syminfo.tickerid,"15", ta.sma(close,bbPeriod))
bbStd      = request.security(syminfo.tickerid,"15", ta.stdev(close,bbPeriod))
bbUpper    = bbMid + bbStd*bbDev
bbLower    = bbMid - bbStd*bbDev
atr15m     = request.security(syminfo.tickerid,"15", ta.atr(atrPeriod15m))

[o15,c15,h15,l15] = request.security(syminfo.tickerid,"15",[open,close,high,low])

// ───────── 5.  Сигналы ───────────────────────────────────────────────
bullishEngulf = useBullEngulf and c15[1]<o15[1] and c15>o15 and c15>=o15[1] and o15<=c15[1]
bearishEngulf = useBearEngulf and c15[1]>o15[1] and c15<o15 and c15<=o15[1] and o15>=c15[1]
bullPinBar    = usePinBar and f_bPin(o15,h15,l15,c15)
bearPinBar    = usePinBar and f_sPin(o15,h15,l15,c15)
bullPattern   = bullishEngulf or bullPinBar
bearPattern   = bearishEngulf or bearPinBar

bullTrendDaily = close>dailyEMA and chopDaily<chopThreshTrend
bearTrendDaily = close<dailyEMA and chopDaily<chopThreshTrend
bullImpulse4h  = macd4h>signal4h and rsi4h>rsiOB
bearImpulse4h  = macd4h<signal4h and rsi4h<rsiOS
volSpike       = vol15m > volMA15m * volSpikeFactor
obvGrowing     = obv15m > obv15m[1]
safeBBzone     = close < bbUpper*0.99 and close > bbLower*1.01
atrFilter      = (high-low) > atr15m * atrMult15m

longSignal  = ((not useDailyTrendChop) or bullTrendDaily) and
              ((not useMACDRSI)        or bullImpulse4h)  and
              ((not useVolSpike)       or volSpike)       and
              ((not useOBV)            or obvGrowing)     and
              ((not useBollinger)      or safeBBzone)     and
              ((not useATR)            or atrFilter)      and
              ((not useCandlePatterns) or bullPattern)

shortSignal = ((not useDailyTrendChop) or bearTrendDaily) and
              ((not useMACDRSI)        or bearImpulse4h)  and
              ((not useVolSpike)       or volSpike)       and
              ((not useOBV)            or not obvGrowing) and
              ((not useBollinger)      or safeBBzone)     and
              ((not useATR)            or atrFilter)      and
              ((not useCandlePatterns) or bearPattern)

// ───────── 6.  Переменные состояния ──────────────────────────────────
var bool   waiting  = false
var bool   waitLong = false
var int    waitBar  = na
var float  waitPx   = na
//var int  waitSLP   = na
var string orderId  = ""
var int    lastExit = na

var color  barClr = na
barClr := na
prevPos = nz(strategy.position_size[1], 0)

// ───────── 7.  Расчёт qty по риску ───────────────────────────────────
calcQty(price, slPerc)=>
    riskUSD = strategy.equity * riskPerc / 100
    stopUSD = price * slPerc / 100
    qtyRisk = riskUSD / stopUSD
    qtyMax  = (strategy.equity * 0.95) / price
    qty     = math.min(qtyRisk, qtyMax)
    math.max(math.round(qty/qtyStep)*qtyStep, qtyStep)

// ───────── 8.  Отмена просроченных лимиток ───────────────────────────
if waiting and strategy.position_size==0 and (bar_index - waitBar) >= entryTimeout
    strategy.cancel(orderId)
    waiting := false
    label.new(bar_index, high, "Cancel",
              xloc=xloc.bar_index, yloc=yloc.price,
              style=label.style_label_center, size=size.tiny,
              color=color.orange, textcolor=color.white)
    barClr := color.orange

// ───────── 9.  Постановка новой лимит‑заявки ─────────────────────────
coolReady = na(lastExit) or (bar_index - lastExit) >= cooldownBars
if strategy.position_size==0 and not waiting and coolReady and (longSignal or shortSignal)
    waitLong := longSignal
    waitPx   := open
    waitBar  := bar_index
    slPerc   = math.max(baseSL, coefA + coefB * atrNow)
    orderId  := (waitLong ? "LIML_" : "LIMS_") + str.tostring(bar_index)
    qty      = calcQty(waitPx, slPerc)

    strategy.entry(orderId, waitLong?strategy.long:strategy.short, qty=qty, limit=waitPx)
    waiting := true

    // ► ALERT: лимит‑ордер создан
    sideTxt = waitLong ? "LONG" : "SHORT"
    alert("LIMIT-"+sideTxt+" | "+syminfo.ticker+
          " | L "+str.tostring(waitPx,format.price),
          alert.freq_once_per_bar)

    clr := waitLong ? color.green : color.red
    label.new(bar_index, waitLong?low:high,
              "L "+str.tostring(waitPx,format.price),
              xloc=xloc.bar_index, yloc=yloc.price,
              style=waitLong?label.style_label_up:label.style_label_down,
              size=size.tiny, color=clr, textcolor=color.white)
    barClr := clr
    
// ───────── 10.  Позиция открылась ────────────────────────────────────
if strategy.position_size!=0 and prevPos==0
    waiting := false
    bool longPos = strategy.position_size > 0

    // ► ALERT: вход выполнен
    sideTxt = longPos ? "LONG" : "SHORT"
    alert("ENTRY-"+sideTxt+" | "+syminfo.ticker+
          " @ "+str.tostring(strategy.position_avg_price,format.price),
          alert.freq_once_per_bar)

    entryPrice = strategy.position_avg_price
    slPerc     = math.max(baseSL, coefA + coefB * atrNow)
 
    tpMultCur  = longPos ? tpMultLong : tpMultShort
    tpPerc     = slPerc * tpMultCur

    slPrice    = longPos ? entryPrice*(1 - slPerc/100)
                         : entryPrice*(1 + slPerc/100)
    tpPrice    = longPos ? entryPrice*(1 + tpPerc/100)
                         : entryPrice*(1 - tpPerc/100)

    strategy.exit("EXIT", from_entry=orderId, stop=slPrice, limit=tpPrice)

    label.new(bar_index, longPos?low:high,
         "Entry "+str.tostring(entryPrice,format.price)+
         ", SL "+fmtPct(slPerc)+"% "+str.tostring(slPrice,format.price)+
         ", TP "+fmtPct(tpPerc)+"% "+str.tostring(tpPrice,format.price),
         xloc=xloc.bar_index, yloc=yloc.price,
         style=longPos?label.style_label_up:label.style_label_down,
         size=size.tiny, color=color.lime, textcolor=color.black)
    barClr := color.lime

// ───────── 11.  Выход и cooldown ─────────────────────────────────────
if strategy.position_size==0 and prevPos!=0
    idx   = strategy.closedtrades - 1
    exitP = strategy.closedtrades.exit_price(idx)
    entryP= strategy.closedtrades.entry_price(idx)
    bool wasLong = prevPos>0
    hitSL = (wasLong and exitP < entryP) or (not wasLong and exitP > entryP)

    tag = hitSL?"SL":"TP"
    clr := hitSL?color.maroon:color.aqua
    label.new(bar_index, high, tag+" "+str.tostring(exitP,format.price),
              xloc=xloc.bar_index, yloc=yloc.price,
              style=label.style_label_down, size=size.tiny,
              color=clr, textcolor=color.white)
    barClr := clr
    lastExit := bar_index

// ───────── 12.  Маркеры сигнала + barcolor ───────────────────────────
if showMark and longSignal
    label.new(bar_index, high*1.01, "L",
              xloc=xloc.bar_index, yloc=yloc.price,
              style=label.style_label_up, size=size.tiny,
              color=color.green)
if showMark and shortSignal
    label.new(bar_index, high*1.01, "S",
              xloc=xloc.bar_index, yloc=yloc.price,
              style=label.style_label_down, size=size.tiny,
              color=color.red)

barcolor(colorBars ? barClr : na)
